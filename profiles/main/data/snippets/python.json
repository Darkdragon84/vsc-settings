{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"if(main)": {
        "prefix": "__main__",
        "body": ["def main():", "    ${1:pass}", "", "", "if __name__ == \"__main__\":", "    main()", ""],
        "description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
    },
	"parametrized": {
		"prefix": "param",
		"body": [
			"@pytest.mark.parametrize(\"${3/:.*//g}\", [])", // removes type annotations
			"def test_${1:function}(${2:self, }${3}):", 
			"    ${0:pass}"
		]
	},
	"typevar": {
		"prefix": "typevar",
		"body": ["${1:T} = TypeVar(\"${1:T}\"${2:, })", "${0}"]
	},
	"qubit": {
		"prefix": "qb",
		"body": ["Qubit(${1})${0}"]
	},
	"property": {
		"prefix": "prop",
		"body": ["@property", "def ${1}(self) -> ${2}:", "   return ${0}"]
	}
}
